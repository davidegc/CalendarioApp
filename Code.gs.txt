/**
 * @OnlyCurrentDoc
 * Servidor principal para la aplicación Calendario App.
 */

function doGet(e) {
  return HtmlService.createTemplateFromFile('Index')
      .evaluate()
      .setTitle('Calendario App')
      .addMetaTag('viewport', 'width=device-width, initial-scale=1')
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.DEFAULT);
}

function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

function getUserInfo() {
    try {
        const activeUser = Session.getActiveUser();
        const email = activeUser?.getEmail();
        if (!email) {
            const effectiveEmail = Session.getEffectiveUser()?.getEmail();
            if (effectiveEmail) {
                 const role = (effectiveEmail.toLowerCase() === VALIDATOR_EMAIL.toLowerCase()) ? 'validator' : 'requester';
                 return { email: effectiveEmail, role: role };
            }
            return null;
        }
        const role = (email.toLowerCase() === VALIDATOR_EMAIL.toLowerCase()) ? 'validator' : 'requester';
        return { email: email, role: role };
    } catch (e) {
        throw new Error(`Error al obtener información del usuario: ${e.message}`);
    }
}

function getAvailableCalendars() {
  if (!AVAILABLE_CALENDARS || AVAILABLE_CALENDARS.length === 0) return [];
  return AVAILABLE_CALENDARS.filter(calInfo => {
      if (!calInfo || !calInfo.id || !calInfo.name) return false;
      try { CalendarApp.getCalendarById(calInfo.id); return true; }
      catch (e) { return false; }
  });
}

function getEventTypes() {
    return EVENT_TYPES;
}

function getAllVisibleEventsForUser() {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEET_NAME);
     if (!sheet || sheet.getLastRow() < 2) return { data: [] };
    const range = sheet.getDataRange();
    const values = range.getValues();
    const events = [];
    const headers = values[0].map(h => h.toString().trim());

    for (let i = 1; i < values.length; i++) {
        const row = values[i];
        if (!row || row.length < TOTAL_COLUMNS || !row[COL.ID]) continue;

        const startDate = parseAndFormatDateISO(row[COL.START_DATE]);
        const endDate = parseAndFormatDateISO(row[COL.END_DATE]);
        if (!startDate || !endDate) {
            continue;
        }

        events.push({
            id: row[COL.ID],
            eventType: row[COL.EVENT_TYPE],
            title: row[COL.TITLE],
            startDate: startDate,
            endDate: endDate,
            description: row[COL.DESCRIPTION],
            requesterName: row[COL.REQ_NAME],
            requesterEmail: row[COL.REQ_EMAIL],
            status: row[COL.STATUS],
            validatorNotes: row[COL.VALIDATOR_NOTES],
            fileId: row[COL.FILE_ID],
            calendarId: row[COL.CALENDAR_ID],
            calendarEventId: row[COL.CALENDAR_EVENT_ID]
        });
    }
    return { data: events };
  } catch (error) {
    return { data: [] };
  }
}

function getUpcomingApprovedEvents() {
    try {
        const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEET_NAME);
        if (!sheet || sheet.getLastRow() < 2) return [];
        const range = sheet.getDataRange();
        const values = range.getValues();
        const upcoming = [];
        const today = new Date(); today.setHours(0, 0, 0, 0);
        const limitDate = new Date(today); limitDate.setDate(today.getDate() + UPCOMING_EVENT_DAYS);

        for (let i = 1; i < values.length; i++) {
            const row = values[i];
             if (row.length < TOTAL_COLUMNS || !row[COL.ID] || row[COL.STATUS] !== 'Aprobado') continue;

            const startDate = parseDateObject(row[COL.START_DATE]);
            const endDate = parseDateObject(row[COL.END_DATE]);
             if (!startDate || !endDate) {
                 continue;
             }

             startDate.setHours(0,0,0,0);
             endDate.setHours(0,0,0,0);

            if (endDate >= today && startDate < limitDate) {
                 upcoming.push({
                     id: row[COL.ID],
                     eventType: row[COL.EVENT_TYPE],
                     title: row[COL.TITLE],
                     startDate: formatISODate(startDate),
                     endDate: formatISODate(endDate),
                 });
            }
        }
        upcoming.sort((a, b) => new Date(a.startDate) - new Date(b.startDate));
        return upcoming.slice(0, MAX_UPCOMING_EVENTS);
    } catch (error) {
        return [];
    }
}

function getEventDetailsForEdit(uniqueId) {
    if (!uniqueId) return null;
    try {
        const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME);
        if (!sheet) {
             return null;
        }
        const { rowIndex, eventData } = findEventRowDataById(sheet, uniqueId);

        if (eventData) {
             const titleParts = eventData.title.split('|');
             const specificTitle = titleParts.length > 1 ? titleParts[1].trim() : eventData.title;

             return {
                id: eventData.id,
                eventType: eventData.eventType,
                title: specificTitle,
                fullTitle: eventData.title,
                startDate: formatISODate(eventData.startDate),
                endDate: formatISODate(eventData.endDate),
                description: eventData.description,
                fileId: eventData.fileId,
                calendarId: eventData.calendarId,
                status: eventData.status,
                requesterEmail: eventData.requesterEmail,
                validatorNotes: eventData.validatorNotes
            };
        } else {
            return null;
        }
    } catch (error) {
        return null;
    }
}

function addEvent(formData, fileData) {
  try {
    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME);
    if (!sheet) throw new Error(`Hoja de cálculo "${SHEET_NAME}" no encontrada.`);
    ensureSheetHeaders(sheet);

    const userInfo = getUserInfo();
    if (!userInfo || !userInfo.email) throw new Error("No se pudo identificar al usuario solicitante.");

    const timestamp = new Date();
    const uniqueId = Utilities.getUuid();
    let fileId = "";
    let fileUrl = "";

    if (fileData && fileData.blob && fileData.fileName && fileData.mimeType) {
      try {
          const folder = getDriveFolderById(DRIVE_FOLDER_ID);
          const decodedBlob = Utilities.base64Decode(fileData.blob);
          const blob = Utilities.newBlob(decodedBlob, fileData.mimeType, fileData.fileName);
          const file = folder.createFile(blob);
          fileId = file.getId();
          fileUrl = file.getUrl();

          try { file.addViewer(VALIDATOR_EMAIL); }
          catch (e) { }

      } catch (driveError) {
          throw new Error(`Error al guardar el archivo adjunto: ${driveError.message}. No se registró el evento.`);
      }
    }

    const finalTitle = `${formData.eventType} | ${formData.title}`;
    const startDateObj = parseDateObject(formData.startDate);
    const endDateObj = parseDateObject(formData.endDate);

    if (!startDateObj || !endDateObj) throw new Error("Fechas de inicio o fin inválidas proporcionadas.");
    if (endDateObj < startDateObj) throw new Error("La fecha de fin no puede ser anterior a la fecha de inicio.");

    const newRow = Array(TOTAL_COLUMNS).fill('');
    newRow[COL.ID] = uniqueId;
    newRow[COL.TIMESTAMP] = timestamp;
    newRow[COL.REQ_EMAIL] = userInfo.email;
    newRow[COL.REQ_NAME] = userInfo.email;
    newRow[COL.EVENT_TYPE] = formData.eventType;
    newRow[COL.TITLE] = finalTitle;
    newRow[COL.START_DATE] = startDateObj;
    newRow[COL.END_DATE] = endDateObj;
    newRow[COL.DESCRIPTION] = formData.description;
    newRow[COL.FILE_ID] = fileId;
    newRow[COL.CALENDAR_ID] = formData.calendarId;
    newRow[COL.STATUS] = "Pendiente";
    newRow[COL.VALIDATOR_NOTES] = "";
    newRow[COL.CALENDAR_EVENT_ID] = "";

    sheet.appendRow(newRow);
    SpreadsheetApp.flush();

    try {
        const subjectValidator = `Nuevo Evento Pendiente: ${finalTitle}`;
        let bodyValidator = `Hola Validador,\n\nEl usuario ${userInfo.email} ha registrado un nuevo evento:\n\n`;
        bodyValidator += `Tipo: ${formData.eventType}\nTítulo: ${finalTitle}\n`;
        bodyValidator += `Fechas: ${formatDisplayDate(startDateObj)} - ${formatDisplayDate(endDateObj)}\n`;
        bodyValidator += `Descripción: ${formData.description}\n`;
        if (fileUrl) { bodyValidator += `Archivo Adjunto: ${fileUrl}\n`; }
        bodyValidator += `\nAccede a la aplicación para revisarlo:\n${ScriptApp.getService().getUrl()}`;

        MailApp.sendEmail(VALIDATOR_EMAIL, subjectValidator, bodyValidator);
    } catch (mailError) {
    }

    return { success: true, message: "Evento registrado correctamente. Pendiente de aprobación." };

  } catch (error) {
    return { success: false, message: `Error al registrar el evento: ${error.message}` };
  }
}

function respondToEventRequest(action, uniqueId, notes = "") {
    let targetCalendarId = null;
    let calendar = null;
    try {
        const currentUser = getUserInfo();
        if (!currentUser || currentUser.role !== 'validator') {
            throw new Error("Acción no permitida. Solo los validadores pueden aprobar/rechazar.");
        }

        const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME);
        if (!sheet) throw new Error(`Hoja "${SHEET_NAME}" no encontrada.`);

        const { rowIndex, eventData } = findEventRowDataById(sheet, uniqueId);
        if (!eventData) throw new Error(`Evento con ID ${uniqueId} no encontrado.`);

        if (eventData.status !== 'Pendiente') {
            return { success: false, message: `El evento ya ha sido procesado (Estado actual: ${eventData.status}).` };
        }

        targetCalendarId = eventData.calendarId;
        let newStatus = "";
        let notificationSubject = "";
        let notificationBody = "";
        let successMessage = "";
        let calendarEventId = "";

        if (action === 'approve') {
            newStatus = 'Aprobado';
            if (!targetCalendarId) throw new Error("No se especificó un calendario de destino para este evento.");

            try {
                calendar = CalendarApp.getCalendarById(targetCalendarId);
                if (!calendar) throw new Error(`Calendario de Google (ID: ${targetCalendarId}) no encontrado o inaccesible.`);

                const adjustedEndDate = new Date(eventData.endDate);
                adjustedEndDate.setDate(adjustedEndDate.getDate() + 1);

                const gCalEvent = calendar.createAllDayEvent(eventData.title, eventData.startDate, adjustedEndDate, { description: eventData.description });
                calendarEventId = gCalEvent.getId();

            } catch (calendarError) {
                if (calendarError.message.includes("permission")) throw new Error(`Permiso denegado para acceder o modificar el calendario "${calendar ? calendar.getName() : targetCalendarId}". Verifica los permisos.`);
                else if (calendarError.message.includes("not found")) throw new Error(`Calendario de Google (ID: ${targetCalendarId}) no encontrado.`);
                else throw new Error(`Error al interactuar con Google Calendar: ${calendarError.message}`);
            }

            sheet.getRange(rowIndex, COL.STATUS + 1).setValue(newStatus);
            sheet.getRange(rowIndex, COL.VALIDATOR_NOTES + 1).setValue(notes);
            sheet.getRange(rowIndex, COL.CALENDAR_EVENT_ID + 1).setValue(calendarEventId);

            notificationSubject = `Evento Aprobado: ${eventData.title}`;
            notificationBody = `Hola ${eventData.requesterName || eventData.requesterEmail},\n\nTu solicitud de evento "${eventData.title}" (${formatDisplayDate(eventData.startDate)} - ${formatDisplayDate(eventData.endDate)}) ha sido APROBADA.\n\nNotas del validador: ${notes || 'Ninguna'}\n\nEl evento ha sido agregado al calendario correspondiente.`;
            successMessage = `Evento "${eventData.title}" APROBADO y agregado a Google Calendar.`;

        } else if (action === 'reject') {
            if (!notes || notes.trim() === "") throw new Error("Se requiere un motivo (notas) para rechazar el evento.");

            newStatus = 'Rechazado';
            sheet.getRange(rowIndex, COL.STATUS + 1).setValue(newStatus);
            sheet.getRange(rowIndex, COL.VALIDATOR_NOTES + 1).setValue(notes);
            sheet.getRange(rowIndex, COL.CALENDAR_EVENT_ID + 1).setValue('');

            notificationSubject = `Evento Rechazado: ${eventData.title}`;
            notificationBody = `Hola ${eventData.requesterName || eventData.requesterEmail},\n\nTu solicitud de evento "${eventData.title}" (${formatDisplayDate(eventData.startDate)} - ${formatDisplayDate(eventData.endDate)}) ha sido RECHAZADA.\n\nMotivo: ${notes}`;
            successMessage = `Evento "${eventData.title}" RECHAZADO.`;

        } else {
            throw new Error(`Acción no válida proporcionada: "${action}". Debe ser 'approve' o 'reject'.`);
        }

        try {
            if (eventData.requesterEmail) {
                MailApp.sendEmail(eventData.requesterEmail, notificationSubject, notificationBody);
            } else {
            }
        }
        catch (mailError) {
        }

        SpreadsheetApp.flush();
        return { success: true, message: successMessage };

    } catch (error) {
        return { success: false, message: `Error al procesar la solicitud: ${error.message}` };
    }
}

function updateEvent(formData, fileData) {
    const uniqueId = formData.id;
    if (!uniqueId) return { success: false, message: "Error: Falta el ID del evento para actualizar." };

    try {
        const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME);
        if (!sheet) throw new Error(`Hoja "${SHEET_NAME}" no encontrada.`);

        const { rowIndex, eventData: originalEventData } = findEventRowDataById(sheet, uniqueId);
        if (!originalEventData) throw new Error(`Evento con ID ${uniqueId} no encontrado para actualizar.`);

        const currentUser = getUserInfo();
        if (!currentUser) throw new Error("No se pudo identificar al usuario actual.");

        const isOwner = currentUser.email === originalEventData.requesterEmail;
        const isValidator = currentUser.role === 'validator';
        const currentStatus = originalEventData.status;

        if (!isValidator && !(isOwner && (currentStatus === 'Pendiente' || currentStatus === 'Rechazado'))) {
            throw new Error("No tienes permiso para modificar este evento en su estado actual.");
        }

        let newFileId = originalEventData.fileId;
        const oldFileId = originalEventData.fileId;

        if (formData.removeAttachment === 'true' && oldFileId) {
             try { DriveApp.getFileById(oldFileId).setTrashed(true); }
             catch(e){ }
             newFileId = "";
        }
        else if (fileData && fileData.blob) {
             if (oldFileId) {
                 try { DriveApp.getFileById(oldFileId).setTrashed(true); }
                 catch(e){ }
             }
             try {
                 const folder = getDriveFolderById(DRIVE_FOLDER_ID);
                 const blob = Utilities.newBlob(Utilities.base64Decode(fileData.blob), fileData.mimeType, fileData.fileName);
                 const file = folder.createFile(blob);
                 newFileId = file.getId();
                 try { file.addViewer(VALIDATOR_EMAIL); } catch (e) { }
             } catch (driveError) {
                 throw new Error(`Error al guardar el nuevo archivo adjunto: ${driveError.message}. No se guardaron los cambios del evento.`);
             }
        }

        const finalTitle = `${formData.eventType} | ${formData.title}`;
        const startDateObj = parseDateObject(formData.startDate);
        const endDateObj = parseDateObject(formData.endDate);

        if (!startDateObj || !endDateObj) throw new Error("Fechas de inicio o fin inválidas proporcionadas.");
        if (endDateObj < startDateObj) throw new Error("La fecha de fin no puede ser anterior a la fecha de inicio.");

        const updatedRowData = sheet.getRange(rowIndex, 1, 1, TOTAL_COLUMNS).getValues()[0];

        updatedRowData[COL.EVENT_TYPE] = formData.eventType;
        updatedRowData[COL.TITLE] = finalTitle;
        updatedRowData[COL.START_DATE] = startDateObj;
        updatedRowData[COL.END_DATE] = endDateObj;
        updatedRowData[COL.DESCRIPTION] = formData.description;
        updatedRowData[COL.CALENDAR_ID] = formData.calendarId;
        updatedRowData[COL.FILE_ID] = newFileId;

        let message = `Evento "${finalTitle}" actualizado correctamente.`;

        if (currentStatus === 'Rechazado' && isOwner && !isValidator) {
            updatedRowData[COL.STATUS] = 'Pendiente';
            updatedRowData[COL.VALIDATOR_NOTES] = 'Re-enviado por el solicitante tras modificación.';
            updatedRowData[COL.CALENDAR_EVENT_ID] = '';
            message += " El evento ha sido marcado como Pendiente para nueva revisión.";
        }

        let gcalUpdateWarning = "";
        if (currentStatus === 'Aprobado' && originalEventData.calendarEventId) {
            try {
                const targetCalendar = CalendarApp.getCalendarById(formData.calendarId);
                if (!targetCalendar) throw new Error(`Calendario de Google destino (ID: ${formData.calendarId}) no encontrado o inaccesible.`);

                let calendarEvent = null;

                if (formData.calendarId !== originalEventData.calendarId) {
                    const oldCalendar = CalendarApp.getCalendarById(originalEventData.calendarId);
                    try { oldCalendar?.getEventById(originalEventData.calendarEventId)?.deleteEvent(); }
                    catch (deleteError) { }

                    const adjustedEndDate = new Date(endDateObj); adjustedEndDate.setDate(adjustedEndDate.getDate() + 1);
                    const newCalEvent = targetCalendar.createAllDayEvent(finalTitle, startDateObj, adjustedEndDate, { description: formData.description });
                    updatedRowData[COL.CALENDAR_EVENT_ID] = newCalEvent.getId();

                } else {
                    try { calendarEvent = targetCalendar.getEventById(originalEventData.calendarEventId); }
                    catch (getEventError) { }

                    if (calendarEvent) {
                        calendarEvent.setTitle(finalTitle);
                        const adjustedEndDate = new Date(endDateObj); adjustedEndDate.setDate(adjustedEndDate.getDate() + 1);
                        calendarEvent.setAllDayDates(startDateObj, adjustedEndDate);
                        calendarEvent.setDescription(formData.description);
                    } else {
                         const adjustedEndDate = new Date(endDateObj); adjustedEndDate.setDate(adjustedEndDate.getDate() + 1);
                         const recreatedEvent = targetCalendar.createAllDayEvent(finalTitle, startDateObj, adjustedEndDate, { description: formData.description });
                         updatedRowData[COL.CALENDAR_EVENT_ID] = recreatedEvent.getId();
                         gcalUpdateWarning = " (Advertencia: El evento original en Google Calendar no se encontró y fue recreado)";
                    }
                }
            } catch (calError) {
                 gcalUpdateWarning = ` (Error al actualizar Google Calendar: ${calError.message})`;
            }
        } else if (currentStatus === 'Aprobado' && !originalEventData.calendarEventId) {
             gcalUpdateWarning = " (Advertencia: El evento estaba aprobado pero no tenía ID de Google Calendar registrado, no se actualizó GCal)";
        }

        sheet.getRange(rowIndex, 1, 1, TOTAL_COLUMNS).setValues([updatedRowData]);
        SpreadsheetApp.flush();

        return { success: true, message: message + gcalUpdateWarning };

    } catch (error) {
        return { success: false, message: `Error al modificar el evento: ${error.message}` };
    }
}

function deleteEvent(uniqueId) {
  if (!uniqueId) return { success: false, message: "Error: Falta el ID del evento para eliminar." };

  try {
    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME);
    if (!sheet) throw new Error(`Hoja "${SHEET_NAME}" no encontrada.`);

    const { rowIndex, eventData } = findEventRowDataById(sheet, uniqueId);
    if (!eventData) throw new Error(`Evento con ID ${uniqueId} no encontrado para eliminar.`);

    const currentUser = getUserInfo();
    if (!currentUser) throw new Error("No se pudo identificar al usuario actual.");

    const isOwner = currentUser.email === eventData.requesterEmail;
    const isValidator = currentUser.role === 'validator';
    const currentStatus = eventData.status;

    if (!isValidator && !(isOwner && (currentStatus === 'Pendiente' || currentStatus === 'Rechazado'))) {
        throw new Error("No tienes permiso para eliminar este evento en su estado actual.");
    }

    if (eventData.status === 'Aprobado' && eventData.calendarEventId && eventData.calendarId) {
      try {
          const calendar = CalendarApp.getCalendarById(eventData.calendarId);
          calendar?.getEventById(eventData.calendarEventId)?.deleteEvent();
      }
      catch (calError) {
      }
    }

    if (eventData.fileId) {
        try {
            DriveApp.getFileById(eventData.fileId).setTrashed(true);
        }
        catch(driveError){
        }
    }

    sheet.deleteRow(rowIndex);
    SpreadsheetApp.flush();

    return { success: true, message: `Evento "${eventData.title}" eliminado correctamente.` };

  } catch (error) {
    return { success: false, message: `Error al eliminar el evento: ${error.message}` };
  }
}

function getFileUrl(fileId) {
    if (!fileId) return null;
    try {
        const file = DriveApp.getFileById(fileId);
        return file.getUrl();
    }
    catch (e) {
        return null;
    }
}

function findEventRowDataById(sheet, uniqueId) {
    if (!uniqueId || !sheet) return { rowIndex: -1, eventData: null };

    try {
        const dataRange = sheet.getDataRange();
        const values = dataRange.getValues();

        for (let i = 1; i < values.length; i++) {
            if (values[i][COL.ID] && values[i][COL.ID].toString() === uniqueId.toString()) {
                const row = values[i];
                if (row.length < TOTAL_COLUMNS) {
                    continue;
                }

                const startDate = parseDateObject(row[COL.START_DATE]);
                const endDate = parseDateObject(row[COL.END_DATE]);
                const timestamp = parseDateObject(row[COL.TIMESTAMP]);

                if (!startDate || !endDate) {
                    return { rowIndex: i + 1, eventData: null };
                }

                const eventData = {
                    id: row[COL.ID],
                    timestamp: timestamp,
                    requesterEmail: row[COL.REQ_EMAIL],
                    requesterName: row[COL.REQ_NAME],
                    eventType: row[COL.EVENT_TYPE],
                    title: row[COL.TITLE],
                    startDate: startDate,
                    endDate: endDate,
                    description: row[COL.DESCRIPTION],
                    fileId: row[COL.FILE_ID],
                    calendarId: row[COL.CALENDAR_ID],
                    status: row[COL.STATUS],
                    validatorNotes: row[COL.VALIDATOR_NOTES],
                    calendarEventId: row[COL.CALENDAR_EVENT_ID]
                };
                return { rowIndex: i + 1, eventData: eventData };
            }
        }
        return { rowIndex: -1, eventData: null };
    } catch (error) {
        return { rowIndex: -1, eventData: null };
    }
}

function ensureSheetHeaders(sheet) {
   if (sheet.getMaxColumns() < TOTAL_COLUMNS) {
       sheet.insertColumnsAfter(sheet.getMaxColumns(), TOTAL_COLUMNS - sheet.getMaxColumns());
   }
   if (sheet.getLastRow() === 0) {
        const headers = Array(TOTAL_COLUMNS).fill('');
        headers[COL.ID] = "ID Evento";
        headers[COL.TIMESTAMP] = "Timestamp Registro";
        headers[COL.REQ_EMAIL] = "Email Solicitante";
        headers[COL.REQ_NAME] = "Nombre Solicitante";
        headers[COL.EVENT_TYPE] = "Tipo Evento";
        headers[COL.TITLE] = "Título Completo";
        headers[COL.START_DATE] = "Fecha Inicio";
        headers[COL.END_DATE] = "Fecha Fin";
        headers[COL.DESCRIPTION] = "Descripción";
        headers[COL.FILE_ID] = "ID Archivo Adjunto";
        headers[COL.CALENDAR_ID] = "ID Calendario Destino";
        headers[COL.STATUS] = "Estado";
        headers[COL.VALIDATOR_NOTES] = "Notas Validador";
        headers[COL.CALENDAR_EVENT_ID] = "ID Evento GCalendar";

        sheet.appendRow(headers);
        sheet.getRange(1, 1, 1, TOTAL_COLUMNS).setFontWeight("bold").setHorizontalAlignment("center");
        sheet.setFrozenRows(1);
        SpreadsheetApp.flush();
   }
}

function getDriveFolderById(folderId) {
  if (!folderId || folderId === "PLACEHOLDER_FOLDER_ID" || folderId === "123id") {
       throw new Error("El ID de la carpeta de Google Drive (DRIVE_FOLDER_ID) no está configurado correctamente en el archivo env.gs.");
  }
  try {
      const folder = DriveApp.getFolderById(folderId);
      folder.getName();
      return folder;
  } catch (e) {
      if (e.message.includes("Invalid argument") || e.message.includes("Argumento no válido")) {
          throw new Error(`El ID de carpeta "${folderId}" parece ser inválido.`);
      } else if (e.message.includes("Not Found") || e.message.includes("no encontrado")) {
          throw new Error(`La carpeta de Google Drive con ID "${folderId}" no fue encontrada. Verifica el ID y que la carpeta exista.`);
      } else if (e.message.includes("Access denied") || e.message.includes("Acceso denegado")) {
          throw new Error(`Acceso denegado a la carpeta de Drive con ID "${folderId}". Asegúrate de que la cuenta que ejecuta el script (${Session.getEffectiveUser().getEmail()}) tenga permisos de edición sobre ella.`);
      } else {
          throw new Error(`No se pudo acceder a la carpeta de Drive (ID: ${folderId}). Error: ${e.message}`);
      }
  }
}

function parseDateObject(dateInput) {
    if (!dateInput) return null;

    if (dateInput instanceof Date && !isNaN(dateInput.getTime())) {
        return dateInput;
    }

    try {
        if (typeof dateInput === 'string' && /^\d{4}-\d{2}-\d{2}$/.test(dateInput)) {
            const timeZone = Session.getScriptTimeZone();
            const parsedDate = Utilities.parseDate(dateInput, timeZone, 'yyyy-MM-dd');
            return parsedDate;
        }

        if (typeof dateInput === 'object' && dateInput.constructor === Date && !isNaN(dateInput.getTime())) {
             return dateInput;
        }

        const d = new Date(dateInput);
        return (!isNaN(d.getTime())) ? d : null;

    } catch (e) {
        return null;
    }
}


function formatISODate(dateObject) {
    if (!dateObject || !(dateObject instanceof Date) || isNaN(dateObject.getTime())) return "";

    try {
        const timeZone = Session.getScriptTimeZone();
        return Utilities.formatDate(dateObject, timeZone, "yyyy-MM-dd");
    } catch (e) {
        return "";
    }
}

function formatDisplayDate(dateObject) {
  if (!dateObject || !(dateObject instanceof Date) || isNaN(dateObject.getTime())) return "Fecha inválida";

   try {
       const timeZone = Session.getScriptTimeZone();
       return Utilities.formatDate(dateObject, timeZone, "dd/MM/yyyy");
   } catch (e) {
       return "Error formato";
   }
}

function getCalendarNameById(calendarId) {
    if (!calendarId) return "N/A";
    try {
        return CalendarApp.getCalendarById(calendarId)?.getName() || `Calendario no encontrado (ID: ${calendarId})`;
    }
    catch (e) {
        return `ID: ${calendarId} (Error al acceder)`;
    }
}

function parseAndFormatDateISO(dateInput) {
    const dateObj = parseDateObject(dateInput);
    return formatISODate(dateObj);
}
